// <auto-generated />
using System;
using Imi.Project.Api.Infrastructure.Data.Context;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace Imi.Project.Api.Infrastructure.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20210422170159_AddIdentityToProject")]
    partial class AddIdentityToProject
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.14")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Imi.Project.Api.Core.Entities.ApplicationUsers.UserComment", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ApplicationUserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ApplicationUserId1")
                        .HasColumnType("nvarchar(450)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<Guid>("SpaceEntityId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Text")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("ApplicationUserId1");

                    b.HasIndex("SpaceEntityId");

                    b.ToTable("UserComments");

                    b.HasData(
                        new
                        {
                            Id = new Guid("75e3838e-6228-40b4-9c60-e9fbc841290b"),
                            ApplicationUserId = new Guid("b9f3599b-ba5d-4799-8fd4-77a7e4023be6"),
                            IsDeleted = false,
                            SpaceEntityId = new Guid("46f23e53-093c-44ab-9427-9b03cd08dd8f"),
                            Text = "Such a shame that its gone!"
                        },
                        new
                        {
                            Id = new Guid("ece72624-77c6-4386-abbd-6f5aac6c2a5e"),
                            ApplicationUserId = new Guid("34d82894-cd34-40a6-a19e-881ca98451f7"),
                            IsDeleted = false,
                            SpaceEntityId = new Guid("ffebf84b-b0cd-4bab-91a6-dd3024f81968"),
                            Text = "What a beauty!"
                        },
                        new
                        {
                            Id = new Guid("00bcbe48-f5f3-4a01-b564-144af5ae332f"),
                            ApplicationUserId = new Guid("86b9ff3d-5188-43e5-9c8d-f7f46823ce73"),
                            IsDeleted = false,
                            SpaceEntityId = new Guid("5552205c-ad29-4f80-adb1-c357b17373f8"),
                            Text = "We are number one"
                        },
                        new
                        {
                            Id = new Guid("d63a5fad-ace9-46da-be26-3c955c5f8085"),
                            ApplicationUserId = new Guid("8d5213cb-1abc-43e3-a4d6-35b92e829f6f"),
                            IsDeleted = false,
                            SpaceEntityId = new Guid("99cbd4d0-c44a-4ef6-9fc3-835b7e11b26d"),
                            Text = "Im ronny pickering mate"
                        },
                        new
                        {
                            Id = new Guid("fdd2f797-8f61-474f-bb30-05a373b19055"),
                            ApplicationUserId = new Guid("ced8f1e3-fbab-4db1-99a1-fa45b1428c21"),
                            IsDeleted = false,
                            SpaceEntityId = new Guid("4fd5e7e7-3516-425a-a8c7-28ee8b89596a"),
                            Text = "nasa is a hoaxcx"
                        });
                });

            modelBuilder.Entity("Imi.Project.Api.Core.Entities.Base.BaseSpaceEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("ApogeeInKm")
                        .HasColumnType("int");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("Latitude")
                        .HasColumnType("float");

                    b.Property<double>("Longtitude")
                        .HasColumnType("float");

                    b.Property<double>("Mass")
                        .HasColumnType("float");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("PerigeeInKm")
                        .HasColumnType("int");

                    b.Property<string>("ShortName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("Size")
                        .HasColumnType("float");

                    b.Property<int>("SpaceObjectType")
                        .HasColumnType("int");

                    b.Property<string>("ThumbnailImage")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("SpaceEntities");

                    b.HasDiscriminator<string>("Discriminator").HasValue("BaseSpaceEntity");
                });

            modelBuilder.Entity("Imi.Project.Api.Core.Entities.Bases.BaseImageEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("SpaceEntityId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Uri")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("SpaceEntityId");

                    b.ToTable("ImageEntities");

                    b.HasData(
                        new
                        {
                            Id = new Guid("c068ab92-d240-49bb-a71b-0acdde861131"),
                            SpaceEntityId = new Guid("46f23e53-093c-44ab-9427-9b03cd08dd8f"),
                            Uri = "Cosmos2251-c068ab92-d240-49bb-a71b-0acdde861131.jpg"
                        },
                        new
                        {
                            Id = new Guid("6b28f5c2-12cd-46ff-a525-ddcdce16b0b4"),
                            SpaceEntityId = new Guid("46f23e53-093c-44ab-9427-9b03cd08dd8f"),
                            Uri = "Cosmos2251-6b28f5c2-12cd-46ff-a525-ddcdce16b0b4.jpg"
                        },
                        new
                        {
                            Id = new Guid("bcc47fac-1a42-41a1-9fa1-8b91d2c8b153"),
                            SpaceEntityId = new Guid("46f23e53-093c-44ab-9427-9b03cd08dd8f"),
                            Uri = "Cosmos2251-bcc47fac-1a42-41a1-9fa1-8b91d2c8b153.jpg"
                        },
                        new
                        {
                            Id = new Guid("f7396475-3304-4e27-b2bb-7fd557184199"),
                            SpaceEntityId = new Guid("ffebf84b-b0cd-4bab-91a6-dd3024f81968"),
                            Uri = "Iridium33-f7396475-3304-4e27-b2bb-7fd557184199.jpg"
                        },
                        new
                        {
                            Id = new Guid("d89db8a6-6c61-4c6f-869e-f2dec992b89d"),
                            SpaceEntityId = new Guid("ffebf84b-b0cd-4bab-91a6-dd3024f81968"),
                            Uri = "Iridium33-d89db8a6-6c61-4c6f-869e-f2dec992b89d.jpg"
                        },
                        new
                        {
                            Id = new Guid("6eb4a73b-95d5-4bf6-8ab1-92e597fa9909"),
                            SpaceEntityId = new Guid("ffebf84b-b0cd-4bab-91a6-dd3024f81968"),
                            Uri = "Iridium33-6eb4a73b-95d5-4bf6-8ab1-92e597fa9909.jpg"
                        },
                        new
                        {
                            Id = new Guid("1e5c583b-1211-479e-bb6f-83e744ea9562"),
                            SpaceEntityId = new Guid("99cbd4d0-c44a-4ef6-9fc3-835b7e11b26d"),
                            Uri = "SL16-1e5c583b-1211-479e-bb6f-83e744ea9562.jpg"
                        },
                        new
                        {
                            Id = new Guid("ba76ce34-7eb0-4e28-92af-4b1701051785"),
                            SpaceEntityId = new Guid("4fd5e7e7-3516-425a-a8c7-28ee8b89596a"),
                            Uri = "Envisat-ba76ce34-7eb0-4e28-92af-4b1701051785.jpg"
                        },
                        new
                        {
                            Id = new Guid("082f1641-cd03-46f3-a484-e2d4b0929849"),
                            SpaceEntityId = new Guid("5552205c-ad29-4f80-adb1-c357b17373f8"),
                            Uri = "Adeos-082f1641-cd03-46f3-a484-e2d4b0929849.jpg"
                        });
                });

            modelBuilder.Entity("Imi.Project.Api.Core.Entities.FavoriteUserObject", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<Guid>("SpaceObjectId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("UserId", "SpaceObjectId");

                    b.HasIndex("SpaceObjectId");

                    b.ToTable("FavoriteUserObjects");

                    b.HasData(
                        new
                        {
                            UserId = "b9f3599b-ba5d-4799-8fd4-77a7e4023be6",
                            SpaceObjectId = new Guid("46f23e53-093c-44ab-9427-9b03cd08dd8f")
                        },
                        new
                        {
                            UserId = "b9f3599b-ba5d-4799-8fd4-77a7e4023be6",
                            SpaceObjectId = new Guid("ffebf84b-b0cd-4bab-91a6-dd3024f81968")
                        },
                        new
                        {
                            UserId = "b9f3599b-ba5d-4799-8fd4-77a7e4023be6",
                            SpaceObjectId = new Guid("99cbd4d0-c44a-4ef6-9fc3-835b7e11b26d")
                        },
                        new
                        {
                            UserId = "b9f3599b-ba5d-4799-8fd4-77a7e4023be6",
                            SpaceObjectId = new Guid("4fd5e7e7-3516-425a-a8c7-28ee8b89596a")
                        },
                        new
                        {
                            UserId = "b9f3599b-ba5d-4799-8fd4-77a7e4023be6",
                            SpaceObjectId = new Guid("5552205c-ad29-4f80-adb1-c357b17373f8")
                        });
                });

            modelBuilder.Entity("Imi.Project.Api.Core.Entities.Scientists.AstronautEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<byte>("Age")
                        .HasColumnType("tinyint");

                    b.Property<DateTime>("BirthDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsCurrentlyActiveInSpace")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("ObitDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Surname")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("TimeInSpace")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("TimeServedForMilitary")
                        .HasColumnType("datetime2");

                    b.Property<int>("TotalMissions")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Astronauts");

                    b.HasData(
                        new
                        {
                            Id = new Guid("0168ae99-7a93-49cd-8d96-832b5d8e5383"),
                            Age = (byte)56,
                            BirthDate = new DateTime(1965, 9, 16, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsCurrentlyActiveInSpace = true,
                            Name = "Sunita",
                            ObitDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Surname = "Williams",
                            TimeInSpace = new DateTime(1, 11, 18, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            TimeServedForMilitary = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            TotalMissions = 4
                        },
                        new
                        {
                            Id = new Guid("6491a95e-872a-438c-8f0d-a0991e3f48bc"),
                            Age = (byte)36,
                            BirthDate = new DateTime(1930, 11, 14, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsCurrentlyActiveInSpace = false,
                            Name = "Edward",
                            ObitDate = new DateTime(1967, 1, 27, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Surname = "White",
                            TimeInSpace = new DateTime(1, 1, 5, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            TimeServedForMilitary = new DateTime(21, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            TotalMissions = 2
                        },
                        new
                        {
                            Id = new Guid("3ef70e4c-74a9-4f46-b017-005e95310401"),
                            Age = (byte)61,
                            BirthDate = new DateTime(1960, 2, 9, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsCurrentlyActiveInSpace = false,
                            Name = "Peggy",
                            ObitDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Surname = "Whitson",
                            TimeInSpace = new DateTime(2, 10, 28, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            TimeServedForMilitary = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            TotalMissions = 3
                        },
                        new
                        {
                            Id = new Guid("5fd739f5-fed9-4345-94db-c58e27790aff"),
                            Age = (byte)99,
                            BirthDate = new DateTime(1930, 1, 20, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsCurrentlyActiveInSpace = false,
                            Name = "Buzz",
                            ObitDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Surname = "Aldrin",
                            TimeInSpace = new DateTime(1, 1, 13, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            TimeServedForMilitary = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            TotalMissions = 2
                        },
                        new
                        {
                            Id = new Guid("2198a48e-2f27-4d09-a264-08913c18d1db"),
                            Age = (byte)63,
                            BirthDate = new DateTime(1958, 2, 26, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsCurrentlyActiveInSpace = false,
                            Name = "Susan",
                            ObitDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Surname = "Jane Helms",
                            TimeInSpace = new DateTime(1, 7, 30, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            TimeServedForMilitary = new DateTime(35, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            TotalMissions = 7
                        });
                });

            modelBuilder.Entity("Imi.Project.Api.Core.Entities.Scientists.AstronomerEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<byte>("Age")
                        .HasColumnType("tinyint");

                    b.Property<DateTime>("BirthDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("ObitDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Surname")
                        .HasColumnType("nvarchar(max)");

                    b.Property<byte>("TotalActiveWorkingYears")
                        .HasColumnType("tinyint");

                    b.Property<int>("TotalDiscoveriesMade")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Astronomers");

                    b.HasData(
                        new
                        {
                            Id = new Guid("87e606a8-8674-4442-bc23-a5893a4d8721"),
                            Age = (byte)36,
                            BirthDate = new DateTime(1950, 8, 24, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Marc",
                            ObitDate = new DateTime(1987, 4, 30, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Surname = "Aaronson",
                            TotalActiveWorkingYears = (byte)21,
                            TotalDiscoveriesMade = 11
                        },
                        new
                        {
                            Id = new Guid("b3eab1b9-7806-4153-b3cd-6131bac6fea9"),
                            Age = (byte)75,
                            BirthDate = new DateTime(1950, 9, 21, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Norio",
                            ObitDate = new DateTime(2019, 4, 13, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Surname = "Kaifu",
                            TotalActiveWorkingYears = (byte)47,
                            TotalDiscoveriesMade = 3
                        },
                        new
                        {
                            Id = new Guid("2cfd4710-3af2-421c-8ebb-262b5b092a92"),
                            Age = (byte)81,
                            BirthDate = new DateTime(1846, 6, 19, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Antonio",
                            ObitDate = new DateTime(1928, 2, 20, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Surname = "Abetti",
                            TotalActiveWorkingYears = (byte)41,
                            TotalDiscoveriesMade = 4
                        },
                        new
                        {
                            Id = new Guid("6bf00c4f-c458-465a-9073-3c4531650133"),
                            Age = (byte)60,
                            BirthDate = new DateTime(1848, 1, 21, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Luis",
                            ObitDate = new DateTime(1908, 6, 21, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Surname = "Cruls",
                            TotalActiveWorkingYears = (byte)39,
                            TotalDiscoveriesMade = 17
                        },
                        new
                        {
                            Id = new Guid("cb4e377d-f341-4c60-9efc-7cc02a8c1df9"),
                            Age = (byte)61,
                            BirthDate = new DateTime(1959, 3, 19, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Marcelo",
                            ObitDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Surname = "Gleiser",
                            TotalActiveWorkingYears = (byte)40,
                            TotalDiscoveriesMade = 6
                        });
                });

            modelBuilder.Entity("Imi.Project.Api.Core.Entities.Scientists.NotableWorkEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("AstronomerId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Title")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("AstronomerId");

                    b.ToTable("NotableWorks");

                    b.HasData(
                        new
                        {
                            Id = new Guid("a8aa9aac-7a91-4f7d-8daf-5d31e0b756ff"),
                            AstronomerId = new Guid("87e606a8-8674-4442-bc23-a5893a4d8721"),
                            Description = "The BOOMERanG experiment (Balloon Observations Of Millimetric Extragalactic Radiation ANd Geophysics) was an experiment which measured the cosmic microwave background radiation of a part of the sky during three sub-orbital (high-altitude) balloon flights.",
                            Title = "BOOMERanG experiment"
                        },
                        new
                        {
                            Id = new Guid("a5a2f47f-97e0-4110-976b-41294db83111"),
                            AstronomerId = new Guid("b3eab1b9-7806-4153-b3cd-6131bac6fea9"),
                            Description = "The oldest and most prestigious physics award in Japan.",
                            Title = " Nishina Memorial Prize"
                        },
                        new
                        {
                            Id = new Guid("511e4a30-8ef6-46e7-9852-b579c6e3d617"),
                            AstronomerId = new Guid("2cfd4710-3af2-421c-8ebb-262b5b092a92"),
                            Description = "Found 89 Planet systems.",
                            Title = "Planet Discoveries"
                        },
                        new
                        {
                            Id = new Guid("03803688-5986-4cb4-a197-5758c7fa7a7c"),
                            AstronomerId = new Guid("6bf00c4f-c458-465a-9073-3c4531650133"),
                            Description = "Founded the Imperial Observatory now known as The National Observatory (Brazil).",
                            Title = "Imperial Observatory"
                        },
                        new
                        {
                            Id = new Guid("e92e08ae-82af-4025-962b-1956934bd31a"),
                            AstronomerId = new Guid("cb4e377d-f341-4c60-9efc-7cc02a8c1df9"),
                            Description = "The Templeton Prize is an annual award granted to a living person, in the estimation of the judges, whose exemplary achievements advance Sir John Templeton's philanthropic vision: harnessing the power of the sciences to explore the deepest questions of the universe and humankind’s place and purpose within it.",
                            Title = "Templeton Prize"
                        });
                });

            modelBuilder.Entity("Imi.Project.Api.Core.Entities.SpaceCraftCrew", b =>
                {
                    b.Property<Guid>("AstronautId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("SpaceCraftId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("AstronautId", "SpaceCraftId");

                    b.HasIndex("SpaceCraftId");

                    b.ToTable("SpaceCraftCrews");

                    b.HasData(
                        new
                        {
                            AstronautId = new Guid("0168ae99-7a93-49cd-8d96-832b5d8e5383"),
                            SpaceCraftId = new Guid("0a612c41-d1e7-41c3-8a40-880e3beb0333")
                        },
                        new
                        {
                            AstronautId = new Guid("6491a95e-872a-438c-8f0d-a0991e3f48bc"),
                            SpaceCraftId = new Guid("0a612c41-d1e7-41c3-8a40-880e3beb0333")
                        },
                        new
                        {
                            AstronautId = new Guid("3ef70e4c-74a9-4f46-b017-005e95310401"),
                            SpaceCraftId = new Guid("f148f935-84ad-41c3-aebd-9d183d9e7e6a")
                        },
                        new
                        {
                            AstronautId = new Guid("5fd739f5-fed9-4345-94db-c58e27790aff"),
                            SpaceCraftId = new Guid("0a612c41-d1e7-41c3-8a40-880e3beb0333")
                        },
                        new
                        {
                            AstronautId = new Guid("2198a48e-2f27-4d09-a264-08913c18d1db"),
                            SpaceCraftId = new Guid("0a612c41-d1e7-41c3-8a40-880e3beb0333")
                        });
                });

            modelBuilder.Entity("Imi.Project.Api.Core.Entities.SpaceObjects.PlanetoidComposition", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("PlanetoidId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("TypeName")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("PlanetoidId");

                    b.ToTable("PlanetoidComposition");

                    b.HasData(
                        new
                        {
                            Id = new Guid("896bf05c-4ceb-4077-b3aa-b84eb7c63754"),
                            PlanetoidId = new Guid("d607b31e-7705-4cfe-b433-01c5ca7b2529"),
                            TypeName = 1
                        },
                        new
                        {
                            Id = new Guid("7c217060-1ba2-42de-bfd1-e8120939b582"),
                            PlanetoidId = new Guid("d607b31e-7705-4cfe-b433-01c5ca7b2529"),
                            TypeName = 2
                        },
                        new
                        {
                            Id = new Guid("14915d9f-0b10-4589-9a17-f6baaa5c8d74"),
                            PlanetoidId = new Guid("540ddc41-0631-409e-a09f-bae6d95cbe8b"),
                            TypeName = 2
                        },
                        new
                        {
                            Id = new Guid("72767dda-f6be-4cee-99ac-b4e627ba524a"),
                            PlanetoidId = new Guid("540ddc41-0631-409e-a09f-bae6d95cbe8b"),
                            TypeName = 1
                        },
                        new
                        {
                            Id = new Guid("3819da10-9c39-44de-87e4-d945fa8a0aee"),
                            PlanetoidId = new Guid("e295c1f3-6f37-400a-b066-b99b06cb01c3"),
                            TypeName = 1
                        },
                        new
                        {
                            Id = new Guid("42ebc493-704d-4ff2-b296-c056faa894f5"),
                            PlanetoidId = new Guid("cb83c7e6-6c8c-4e38-8f1e-356ccfabcfc0"),
                            TypeName = 1
                        },
                        new
                        {
                            Id = new Guid("3e7c9638-2ca6-413d-8e57-1e279645249d"),
                            PlanetoidId = new Guid("f78cd23d-0ba6-4e64-86bb-d183a274f1f6"),
                            TypeName = 2
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedName")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedUserName")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers");

                    b.HasDiscriminator<string>("Discriminator").HasValue("IdentityUser");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("Imi.Project.Api.Core.Entities.SpaceObjects.SpaceCraftEntity", b =>
                {
                    b.HasBaseType("Imi.Project.Api.Core.Entities.Base.BaseSpaceEntity");

                    b.Property<string>("MissionInformation")
                        .HasColumnType("nvarchar(max)");

                    b.HasDiscriminator().HasValue("SpaceCraftEntity");

                    b.HasData(
                        new
                        {
                            Id = new Guid("e50a22c0-30e1-4d72-9f0b-ed259ee27514"),
                            ApogeeInKm = 550,
                            Latitude = 0.0,
                            Longtitude = 0.0,
                            Mass = 260.0,
                            Name = "Starlink V1",
                            PerigeeInKm = 550,
                            ShortName = "SlV1",
                            Size = 2.0,
                            SpaceObjectType = 3,
                            ThumbnailImage = "default.jpg",
                            MissionInformation = "Starlink is SpaceX's 12000-satellite low earth orbit constellation to provide broadband Internet access."
                        },
                        new
                        {
                            Id = new Guid("f148f935-84ad-41c3-aebd-9d183d9e7e6a"),
                            ApogeeInKm = 0,
                            Latitude = 0.0,
                            Longtitude = 0.0,
                            Mass = 9616.0,
                            Name = "Crew Dragon",
                            PerigeeInKm = 0,
                            ShortName = "C-DA",
                            Size = 8.0,
                            SpaceObjectType = 2,
                            ThumbnailImage = "default.jpg",
                            MissionInformation = "Crew dragon created by spacex is designed to send humans to space and back to earth in a costeffective manner."
                        },
                        new
                        {
                            Id = new Guid("d62bbcec-6e3a-416f-a5e3-d77fbee675d6"),
                            ApogeeInKm = 0,
                            Latitude = 0.0,
                            Longtitude = 0.0,
                            Mass = 7415.0,
                            Name = "Cargo Dragon",
                            PerigeeInKm = 0,
                            ShortName = "CA-DA",
                            Size = 8.0,
                            SpaceObjectType = 3,
                            ThumbnailImage = "default.jpg",
                            MissionInformation = "Dragon created by spacex is designed to send cargo to space and back to earth in a costeffective manner"
                        },
                        new
                        {
                            Id = new Guid("0a612c41-d1e7-41c3-8a40-880e3beb0333"),
                            ApogeeInKm = 421,
                            Latitude = 0.0,
                            Longtitude = 0.0,
                            Mass = 419725.0,
                            Name = "International Space Station",
                            PerigeeInKm = 417,
                            ShortName = "ISS",
                            Size = 915.0,
                            SpaceObjectType = 2,
                            ThumbnailImage = "default.jpg",
                            MissionInformation = "he ISS was originally intended to be a laboratory, observatory, and factory while providing transportation, maintenance, and a low Earth orbit staging base for possible future missions to the Moon, Mars, and asteroids."
                        },
                        new
                        {
                            Id = new Guid("4ef5c419-655a-440b-967c-65c79bf243d3"),
                            ApogeeInKm = 0,
                            Latitude = 0.0,
                            Longtitude = 0.0,
                            Mass = 531000.0,
                            Name = "Atlas V-541",
                            PerigeeInKm = 0,
                            ShortName = "AT-V-541",
                            Size = 58.0,
                            SpaceObjectType = 2,
                            ThumbnailImage = "default.jpg",
                            MissionInformation = "This launch vehicle provides the velocity needed by a spacecraft to escape Earth's gravity and set it on its course for Mars."
                        });
                });

            modelBuilder.Entity("Imi.Project.Api.Core.Entities.SpaceObjects.SpaceDebrisEntity", b =>
                {
                    b.HasBaseType("Imi.Project.Api.Core.Entities.Base.BaseSpaceEntity");

                    b.Property<bool>("IsOnCollisionCourse")
                        .HasColumnType("bit");

                    b.HasDiscriminator().HasValue("SpaceDebrisEntity");

                    b.HasData(
                        new
                        {
                            Id = new Guid("46f23e53-093c-44ab-9427-9b03cd08dd8f"),
                            ApogeeInKm = 760,
                            Latitude = 0.0,
                            Longtitude = 0.0,
                            Mass = 15437.15,
                            Name = "Cosmos 2251",
                            PerigeeInKm = 736,
                            ShortName = "036BXZ",
                            Size = 12.0,
                            SpaceObjectType = 0,
                            ThumbnailImage = "ThnCosmos2251.jpg",
                            IsOnCollisionCourse = false
                        },
                        new
                        {
                            Id = new Guid("ffebf84b-b0cd-4bab-91a6-dd3024f81968"),
                            ApogeeInKm = 899,
                            Latitude = 0.0,
                            Longtitude = 0.0,
                            Mass = 241.0,
                            Name = "Iridium 33",
                            PerigeeInKm = 756,
                            ShortName = "051DG",
                            Size = 1.0,
                            SpaceObjectType = 0,
                            ThumbnailImage = "ThnIridium33.jpg",
                            IsOnCollisionCourse = true
                        },
                        new
                        {
                            Id = new Guid("99cbd4d0-c44a-4ef6-9fc3-835b7e11b26d"),
                            ApogeeInKm = 848,
                            Latitude = 0.0,
                            Longtitude = 0.0,
                            Mass = 9000.0,
                            Name = "SL-16RB",
                            PerigeeInKm = 837,
                            ShortName = "SL16",
                            Size = 7.0,
                            SpaceObjectType = 0,
                            ThumbnailImage = "ThnSL16.jpg",
                            IsOnCollisionCourse = false
                        },
                        new
                        {
                            Id = new Guid("4fd5e7e7-3516-425a-a8c7-28ee8b89596a"),
                            ApogeeInKm = 766,
                            Latitude = 0.0,
                            Longtitude = 0.0,
                            Mass = 7800.0,
                            Name = "Envisat",
                            PerigeeInKm = 764,
                            ShortName = "Esat",
                            Size = 2.0,
                            SpaceObjectType = 0,
                            ThumbnailImage = "ThnEnvisat.jpg",
                            IsOnCollisionCourse = true
                        },
                        new
                        {
                            Id = new Guid("5552205c-ad29-4f80-adb1-c357b17373f8"),
                            ApogeeInKm = 794,
                            Latitude = 0.0,
                            Longtitude = 0.0,
                            Mass = 3560.0,
                            Name = "Adeos",
                            PerigeeInKm = 793,
                            ShortName = "Adeos",
                            Size = 7.0,
                            SpaceObjectType = 0,
                            ThumbnailImage = "ThnAdeos.jpg",
                            IsOnCollisionCourse = true
                        });
                });

            modelBuilder.Entity("Imi.Project.Api.Core.Entities.SpaceObjects.SpacePlanetoidEntity", b =>
                {
                    b.HasBaseType("Imi.Project.Api.Core.Entities.Base.BaseSpaceEntity");

                    b.Property<Guid>("AstronomerId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Shape")
                        .HasColumnType("nvarchar(max)");

                    b.HasIndex("AstronomerId");

                    b.HasDiscriminator().HasValue("SpacePlanetoidEntity");

                    b.HasData(
                        new
                        {
                            Id = new Guid("d607b31e-7705-4cfe-b433-01c5ca7b2529"),
                            ApogeeInKm = 38,
                            Latitude = 0.0,
                            Longtitude = 0.0,
                            Mass = 4877.0,
                            Name = "Hydra",
                            PerigeeInKm = 38,
                            ShortName = "S/2005",
                            Size = 5752.0,
                            SpaceObjectType = 1,
                            ThumbnailImage = "default.jpg",
                            AstronomerId = new Guid("cb4e377d-f341-4c60-9efc-7cc02a8c1df9"),
                            Shape = "Oval"
                        },
                        new
                        {
                            Id = new Guid("540ddc41-0631-409e-a09f-bae6d95cbe8b"),
                            ApogeeInKm = 32,
                            Latitude = 0.0,
                            Longtitude = 0.0,
                            Mass = 1676.0,
                            Name = "Kerberos",
                            PerigeeInKm = 31,
                            ShortName = "S/2011",
                            Size = 1710.0,
                            SpaceObjectType = 1,
                            ThumbnailImage = "default.jpg",
                            AstronomerId = new Guid("b3eab1b9-7806-4153-b3cd-6131bac6fea9"),
                            Shape = "Sphere"
                        },
                        new
                        {
                            Id = new Guid("e295c1f3-6f37-400a-b066-b99b06cb01c3"),
                            ApogeeInKm = 31,
                            Latitude = 22.826000000000001,
                            Longtitude = 88.004999999999995,
                            Mass = 147.0,
                            Name = "1566 Icarus",
                            PerigeeInKm = 47,
                            ShortName = "1566Ica",
                            Size = 671.0,
                            SpaceObjectType = 1,
                            ThumbnailImage = "default.jpg",
                            AstronomerId = new Guid("6bf00c4f-c458-465a-9073-3c4531650133"),
                            Shape = "Oval"
                        },
                        new
                        {
                            Id = new Guid("cb83c7e6-6c8c-4e38-8f1e-356ccfabcfc0"),
                            ApogeeInKm = 45,
                            Latitude = 0.0,
                            Longtitude = 0.0,
                            Mass = 3454.0,
                            Name = "1685 Toro",
                            PerigeeInKm = 47,
                            ShortName = "Tor",
                            Size = 2457.0,
                            SpaceObjectType = 1,
                            ThumbnailImage = "default.jpg",
                            AstronomerId = new Guid("2cfd4710-3af2-421c-8ebb-262b5b092a92"),
                            Shape = "Egg"
                        },
                        new
                        {
                            Id = new Guid("f78cd23d-0ba6-4e64-86bb-d183a274f1f6"),
                            ApogeeInKm = 78,
                            Latitude = 0.0,
                            Longtitude = 0.0,
                            Mass = 2579.0,
                            Name = "1981 Midas",
                            PerigeeInKm = 68,
                            ShortName = "Midas",
                            Size = 5478.0,
                            SpaceObjectType = 1,
                            ThumbnailImage = "default.jpg",
                            AstronomerId = new Guid("87e606a8-8674-4442-bc23-a5893a4d8721"),
                            Shape = "Sphere"
                        });
                });

            modelBuilder.Entity("Imi.Project.Api.Core.Entities.ApplicationUsers.ApplicationUser", b =>
                {
                    b.HasBaseType("Microsoft.AspNetCore.Identity.IdentityUser");

                    b.HasDiscriminator().HasValue("ApplicationUser");

                    b.HasData(
                        new
                        {
                            Id = "b9f3599b-ba5d-4799-8fd4-77a7e4023be6",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "61ba11b9-f620-4c59-aa77-b6fc99862af5",
                            Email = "AdmiralChunky@mailinator.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            PasswordHash = "4D3C54A22A97802627566A24F2DC7C1B",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "2a4185ee-af97-429f-b90f-323d0f41ab6a",
                            TwoFactorEnabled = false,
                            UserName = "Admiral Chuncky"
                        },
                        new
                        {
                            Id = "34d82894-cd34-40a6-a19e-881ca98451f7",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "1a49bbc4-e24b-43e2-b924-d937c8696b42",
                            Email = "ColonelChunky@mailinator.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            PasswordHash = "CE071784473D4E694D397DA4ECB5219E",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "2ca9cd8c-c603-45bb-8e38-4c3a33c1db21",
                            TwoFactorEnabled = false,
                            UserName = "Colonel Chuncky"
                        },
                        new
                        {
                            Id = "86b9ff3d-5188-43e5-9c8d-f7f46823ce73",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "e0fcb6ee-c14e-4f60-a524-a409667f50fe",
                            Email = "SergeantChunky@mailinator.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            PasswordHash = "6074E512F4F844BD415C5941A41BE25F",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "7c23f9e3-29f9-4ade-bc64-146822bf187b",
                            TwoFactorEnabled = false,
                            UserName = "Sergeant Chuncky"
                        },
                        new
                        {
                            Id = "8d5213cb-1abc-43e3-a4d6-35b92e829f6f",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "8af86ff3-d769-4ff4-a3b7-774139882bbc",
                            Email = "CorporalChunky@mailinator.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            PasswordHash = "27CFC5E4E4AF55E4A67D22B5C080F750",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "9379cd17-a781-4dcb-aa9c-ceb87ac8b20f",
                            TwoFactorEnabled = false,
                            UserName = "Corporal Chuncky"
                        },
                        new
                        {
                            Id = "ced8f1e3-fbab-4db1-99a1-fa45b1428c21",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "5f2e17f9-bcb9-4090-beff-fc4e7c23df34",
                            Email = "RecruitChunky@mailinator.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            PasswordHash = "9F3171B314D1869C68B0E9F82C087BF9",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "e5ff9864-ae76-49f7-96e2-f6ad1f65d613",
                            TwoFactorEnabled = false,
                            UserName = "Recruit Chuncky"
                        });
                });

            modelBuilder.Entity("Imi.Project.Api.Core.Entities.ApplicationUsers.UserComment", b =>
                {
                    b.HasOne("Imi.Project.Api.Core.Entities.ApplicationUsers.ApplicationUser", "ApplicationUser")
                        .WithMany("UserComments")
                        .HasForeignKey("ApplicationUserId1");

                    b.HasOne("Imi.Project.Api.Core.Entities.Base.BaseSpaceEntity", "SpaceEntity")
                        .WithMany("UserComments")
                        .HasForeignKey("SpaceEntityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Imi.Project.Api.Core.Entities.Bases.BaseImageEntity", b =>
                {
                    b.HasOne("Imi.Project.Api.Core.Entities.Base.BaseSpaceEntity", "SpaceEntity")
                        .WithMany("Images")
                        .HasForeignKey("SpaceEntityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Imi.Project.Api.Core.Entities.FavoriteUserObject", b =>
                {
                    b.HasOne("Imi.Project.Api.Core.Entities.Base.BaseSpaceEntity", "SpaceObject")
                        .WithMany("FavoriteUserObjects")
                        .HasForeignKey("SpaceObjectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Imi.Project.Api.Core.Entities.ApplicationUsers.ApplicationUser", "User")
                        .WithMany("FavoriteUserObjects")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Imi.Project.Api.Core.Entities.Scientists.NotableWorkEntity", b =>
                {
                    b.HasOne("Imi.Project.Api.Core.Entities.Scientists.AstronomerEntity", "Astronomer")
                        .WithMany("NotableWorks")
                        .HasForeignKey("AstronomerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Imi.Project.Api.Core.Entities.SpaceCraftCrew", b =>
                {
                    b.HasOne("Imi.Project.Api.Core.Entities.Scientists.AstronautEntity", "Astronaut")
                        .WithMany("SpaceCraftCrews")
                        .HasForeignKey("AstronautId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Imi.Project.Api.Core.Entities.SpaceObjects.SpaceCraftEntity", "SpaceCraft")
                        .WithMany("SpaceCraftCrews")
                        .HasForeignKey("SpaceCraftId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Imi.Project.Api.Core.Entities.SpaceObjects.PlanetoidComposition", b =>
                {
                    b.HasOne("Imi.Project.Api.Core.Entities.SpaceObjects.SpacePlanetoidEntity", "Planetoid")
                        .WithMany("Compositions")
                        .HasForeignKey("PlanetoidId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Imi.Project.Api.Core.Entities.SpaceObjects.SpacePlanetoidEntity", b =>
                {
                    b.HasOne("Imi.Project.Api.Core.Entities.Scientists.AstronomerEntity", "Astronomer")
                        .WithMany()
                        .HasForeignKey("AstronomerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
