@inject IJSRuntime JsRuntime;

<div class="container" style="background-color:lightslategray;">
    <div id="carouselExampleIndicators" style="background-color:aqua;"
         class="carousel slide" data-ride="carousel">
        <ol class="carousel-indicators">

            <li data-target="#carouselExampleIndicators" data-slide-to="1"></li>
            @for (int i = 0; i < SpaceItems.Length - 1; i++)
            {
                <li data-target="#carouselExampleIndicators" data-slide-to="@i" class="@(i == 0 ? "active" : "") "></li>
            }
        </ol>
        <div class="carousel-inner">
            @foreach (var spaceItem in SpaceItems)
            {
                <div class="carousel-item @(spaceItem == SpaceItems.First() ? "active" : "")">
                    <img class="d-block w-100" src="./@spaceItem.ImageUrls.FirstOrDefault()" height="500">
                    <div class="carousel-caption d-none d-md-block">
                        <h5>@spaceItem.Name</h5>
                        <p>@spaceItem.ShortName</p>
                    </div>
                </div>
            }
        </div>
        <a id="carouselExampleIndicators-prev"
           class="carousel-control-prev" role="button" data-slide="prev">
            <span class="carousel-control-prev-icon" aria-hidden="true"></span>
            <span class="sr-only">Previous</span>
        </a>
        <a id="carouselExampleIndicators-next"
           class="carousel-control-next" role="button" data-slide="next">
            <span class="carousel-control-next-icon" aria-hidden="true"></span>
            <span class="sr-only">Next</span>
        </a>
    </div>
</div>

@functions
{
    protected async override Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await JsRuntime.InvokeAsync<object>("initializeCarousel");
            firstRender = false;
        }
    }
}